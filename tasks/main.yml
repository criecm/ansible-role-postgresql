---
- name: install/upgrade
  include_tasks: 'install-{{ ansible_os_family }}.yml'

- name: log dir
  file:
    dest: '{{ pg_logdir }}'
    state: directory
    mode: '0750'
    owner: '{{ pg_owner }}'
    group: '{{ pg_group }}'
  when: pg_logdest != "syslog"

- name: new server ?
  stat:
    path: '{{ pg_basedir }}/{{ pg_datasubdir }}/base'
  register: pg_db_exists

- name: dbdir
  file:
    dest: '{{ pg_basedir }}/{{ pg_datasubdir }}'
    state: directory
    owner: '{{ pg_owner }}'
    group: '{{ pg_group }}'
    mode: 'u+rwX,g-rwx,o-rwx'
    recurse: yes
  when: not pg_db_exists.stat.exists

- name: enable service
  service:
    name: postgresql
    enabled: yes

# first install
- name: init postgresql server
#  command: 'service postgresql {% if ansible_os_family == "FreeBSD" %}one{% endif %}initdb'
  command: 'service postgresql initdb'
  register: pg_init
  when: not pg_db_exists.stat.exists and ansible_os_family == "FreeBSD"

# postgresql.conf
- name: postgresql.conf.j2
  template:
    src: postgresql.conf.j2
    dest: '{{ pg_basedir }}/{{ pg_datasubdir }}/postgresql.conf'
    mode: '0640'
    group: '{{ pg_group }}'
    force: '{{ force_conf | default(False) or not pg_db_exists.stat.exists }}'
    backup: yes
  notify: restart postgresql

- name: postgresql.conf, specific
  lineinfile:
    line: '{{ item.key }} = {{ item.value }}'
    dest: '{{ pg_basedir }}/{{ pg_datasubdir }}/postgresql.conf'
  with_dict: '{{ pg_config }}'
  notify: restart postgresql

- name: pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: '{{ pg_basedir }}/{{ pg_datasubdir }}/pg_hba.conf'
    mode: '0640'
    group: '{{ pg_group }}'
  when: not pg_db_exists.stat.exists
  notify: reload postgresql

- name: start if needed
  service:
    name: postgresql
    state: started

# DBs in local facts
- name: facts.d dir
  file:
    dest: '{{ etcprefix }}/etc/ansible/facts.d'
    state: directory

- name: install pg facts for DB
  template:
    dest: '{{ etcprefix }}/etc/ansible/facts.d/pg_dbs.fact'
    mode: 'u=srwx,g=rx,o-rwx'
    owner: '{{ pg_owner }}'
    src: pg.fact.j2

# default admins
- name: 'pg user {{ pg_admin_user }}'
  postgresql_user:
    name: '{{ pg_admin_user }}'
    password: '{{ pg_admin_password }}'
    role_attr_flags: 'SUPERUSER'
    state: present
  when: pg_admin_user and pg_admin_password and not pg_db_exists.stat.exists
  become: True
  become_user: '{{ pg_owner }}'
  become_method: su

# admin users
- name: pg users
  include_tasks: user.yml
  loop_control:
    loop_var: pg_user
  loop: '{{ pg_users | union(pg_maintenance_users) }}'

- name: get postgresql infos
  postgresql_info:
  become: True
  become_user: '{{ pg_owner }}'
  become_method: su
  register: pg_actual

# DBs
- name: new dbs
  include_tasks: db.yml
  loop_control:
    loop_var: pg_db
  loop: '{{ pg_dbs }}'
  when: 'pg_dbs | count > 0'
