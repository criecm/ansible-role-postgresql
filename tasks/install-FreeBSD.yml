---
- name: get postgres installed pkgs
  shell: 'pkg info -ix postgresql'
  register: pkgs_installed
  changed_when: False
  failed_when: False
  check_mode: False

- name: facts current version
  set_fact:
    pg_old_vers: '{% if pkgs_installed.stdout_lines | count > 0 %}{{ pkgs_installed.stdout_lines | select("match","postgresql[0-9]*-server")
        | list | first | regex_replace("^.*ql([0-9]*)-server.*","\1") }}{% endif %}'
    pg_def_vers: '{{ pg_version | regex_replace("\.","") }}'
    pg_vers: '{{ pg_version | regex_replace("\.","") }}'

- name: facts set vers to avoid accidental upgrade
  set_fact:
    pg_vers: '{{ pg_old_vers }}'
    pg_version: '{{ pkgs_installed.stdout_lines 
    | select("match","postgresql"+pg_old_vers+"-server") 
    | list | first | regex_replace("^.*ql[0-9]*-server-([0-9]*\.[0-9]*)\..*","\1") }}'
    pg_datasubdir: 'data{{ pg_old_vers }}'
  when: pg_old_vers | length > 0 and pg_old_vers is not match(pg_def_vers) and not pg_upgrade | bool

- name: is_running ?
  command: 'pgrep postgres'
  register: pgrep
  failed_when: False
  check_mode: False
  changed_when: False

- name: login.conf
  blockinfile:
    dest: /etc/login.conf
    marker: '# {mark} criecm.postgresql'
    block: |
      {{ pg_class }}:\
        :lang={{ pg_lc }}:\
        :setenv=LC_MESSAGES={{ pg_lc_messages | default(pg_lc) }}:\
        :setenv=LC_ALL={{ pg_lc }}:\
        :setenv=LC_COLLATE={{ pg_lc }}:\
        :charset=UTF-8:\
        :tc=daemon:

  when: pg_class | default(False)
  register: loginconf
  notify: cap_mkdb login.conf

- name: cap_mkdb
  command: '/usr/bin/cap_mkdb /etc/login.conf'
  when: loginconf.changed

- name: postgres group
  group:
    name: '{{ pg_group }}'
    state: present

- name: postgres user
  user:
    group: '{{ pg_group }}'
    name: '{{ pg_owner }}'
    shell: /usr/local/bin/zsh
    login_class: '{{ pg_class | default(omit) }}'
    home: '{{ pg_owner_home }}'

- name: upgrade postgresql
  include_tasks: upgrade-FreeBSD.yml
  register: upgrade_pg
  when: pg_old_vers and pg_old_vers != pg_vers

- name: zfs
  zfs:
    name: '{{ pg_zfs_base }}/{{ pg_datasubdir }}'
    state: present
    extra_zfs_properties:
      mountpoint: '{{ pg_basedir }}/{{ pg_datasubdir }}'
      recordsize: 8K
  when: pg_zfs_base | length > 0 and not pgrep.rc == 0

- name: dbdir chmod
  file:
    path: '{{ pg_basedir }}/{{ pg_datasubdir }}'
    owner: '{{ pg_owner }}'
    group: '{{ pg_group }}'
    mode: '0700'
    state: directory

- name: syslog dirs
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - /usr/local/etc/syslog.d
    - /usr/local/etc/newsyslog.conf.d
  when: pg_logdest == "syslog"

- name: syslog postgresql
  copy:
    dest: /usr/local/etc/syslog.d/postgresql.conf
    content: |
      {{ pg_syslog_facility }}.*   /var/log/postgresql.log
  when: pg_logdest == "syslog"

- name: newsyslog
  copy:
    force: no
    dest: /usr/local/etc/newsyslog.conf.d/postgresql.conf
    content: |
      /var/log/postgresql.log  root:{{ pg_group }}  640 7 1000  @T00  CX
  when: pg_logdest == "syslog"
  notify: newsyslog

- name: install postgresql packages
  pkgng:
    name:
      - 'postgresql{{ pg_vers }}-server'
      - 'postgresql{{ pg_vers }}-pltcl'
      - 'py{{ ansible_python.version.major }}{{ ansible_python.version.minor }}-pip'
    state: present
  register: install_pg
  when: not upgrade_pg.changed and not pgrep.rc == 0 and not installpkgs | default(False)

- name: 'install postgresql-contrib when version < 11'
  pkgng:
    name: 'postgresql{{ pg_vers }}-contrib'
    state: present
  when: install_pg.changed and pg_version is version("11","<")

- name: rc.conf
  lineinfile:
    dest: /etc/rc.conf
    line: '{{ item.key }}="{{ item.value }}"'
    regexp: '^{{ item.key }}='
  with_items:
    - { key: postgresql_enable, value: "YES" }
    - { key: postgresql_data, value: '{{ pg_basedir }}/{{ pg_datasubdir }}' }
    - { key: postgresql_class, value: '{{ pg_class }}' }
  notify: restart postgresql
  when: not pg_old_vers

- name: clean old postgresql_dbdir rc var
  lineinfile:
    dest: /etc/rc.conf
    regexp: '^postgresql_dbdir='
    state: absent

- name: install psycopg2 python module
  pip:
    executable: 'pip-{{ ansible_python.version.major }}.{{ ansible_python.version.minor }}'
    name: psycopg2
    state: present
